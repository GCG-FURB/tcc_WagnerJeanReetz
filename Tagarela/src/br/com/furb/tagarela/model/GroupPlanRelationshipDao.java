package br.com.furb.tagarela.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GROUP_PLAN_RELATIONSHIP.
*/
public class GroupPlanRelationshipDao extends AbstractDao<GroupPlanRelationship, Void> {

    public static final String TABLENAME = "GROUP_PLAN_RELATIONSHIP";

    /**
     * Properties of entity GroupPlanRelationship.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ServerID = new Property(0, Integer.class, "serverID", false, "SERVER_ID");
        public final static Property GroupID = new Property(1, Integer.class, "groupID", false, "GROUP_ID");
        public final static Property PlanID = new Property(2, Integer.class, "planID", false, "PLAN_ID");
    };


    public GroupPlanRelationshipDao(DaoConfig config) {
        super(config);
    }
    
    public GroupPlanRelationshipDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GROUP_PLAN_RELATIONSHIP' (" + //
                "'SERVER_ID' INTEGER," + // 0: serverID
                "'GROUP_ID' INTEGER," + // 1: groupID
                "'PLAN_ID' INTEGER);"); // 2: planID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GROUP_PLAN_RELATIONSHIP'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GroupPlanRelationship entity) {
        stmt.clearBindings();
 
        Integer serverID = entity.getServerID();
        if (serverID != null) {
            stmt.bindLong(1, serverID);
        }
 
        Integer groupID = entity.getGroupID();
        if (groupID != null) {
            stmt.bindLong(2, groupID);
        }
 
        Integer planID = entity.getPlanID();
        if (planID != null) {
            stmt.bindLong(3, planID);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public GroupPlanRelationship readEntity(Cursor cursor, int offset) {
        GroupPlanRelationship entity = new GroupPlanRelationship( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // serverID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // groupID
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2) // planID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GroupPlanRelationship entity, int offset) {
        entity.setServerID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setGroupID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setPlanID(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(GroupPlanRelationship entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(GroupPlanRelationship entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
