package br.com.furb.tagarela.model;

import java.util.ArrayList;
import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SYMBOL.
*/
public class SymbolDao extends AbstractDao<Symbol, Void> {

    public static final String TABLENAME = "SYMBOL";

    /**
     * Properties of entity Symbol.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ServerID = new Property(0, Integer.class, "serverID", false, "SERVER_ID");
        public final static Property UserID = new Property(1, Integer.class, "userID", false, "USER_ID");
        public final static Property IsGeneral = new Property(2, Boolean.class, "isGeneral", false, "IS_GENERAL");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property VideoLink = new Property(4, String.class, "videoLink", false, "VIDEO_LINK");
        public final static Property Picture = new Property(5, byte[].class, "picture", false, "PICTURE");
        public final static Property Sound = new Property(6, byte[].class, "sound", false, "SOUND");
        public final static Property CategoryID = new Property(7, long.class, "categoryID", false, "CATEGORY_ID");
        public final static Property AscRepresentation = new Property(8, String.class, "ascRepresentation", false, "ASC_REPRESENTATION");
        public final static Property AlphaID = new Property(9, Integer.class, "alphaID", false, "ALPHA_ID");
    };

    private DaoSession daoSession;

    private Query<Symbol> category_SymbolsQuery;

    public SymbolDao(DaoConfig config) {
        super(config);
    }
    
    public SymbolDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SYMBOL' (" + //
                "'SERVER_ID' INTEGER," + // 0: serverID
                "'USER_ID' INTEGER," + // 1: userID
                "'IS_GENERAL' INTEGER," + // 2: isGeneral
                "'NAME' TEXT," + // 3: name
                "'VIDEO_LINK' TEXT," + // 4: videoLink
                "'PICTURE' BLOB," + // 5: picture
                "'SOUND' BLOB," + // 6: sound
                "'CATEGORY_ID' INTEGER NOT NULL ," + // 7: categoryID
                "'ASC_REPRESENTATION' TEXT," + // 8: ascRepresentation
                "'ALPHA_ID' INTEGER);"); // 9: alphaID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SYMBOL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Symbol entity) {
        stmt.clearBindings();
 
        Integer serverID = entity.getServerID();
        if (serverID != null) {
            stmt.bindLong(1, serverID);
        }
 
        Integer userID = entity.getUserID();
        if (userID != null) {
            stmt.bindLong(2, userID);
        }
 
        Boolean isGeneral = entity.getIsGeneral();
        if (isGeneral != null) {
            stmt.bindLong(3, isGeneral ? 1l: 0l);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String videoLink = entity.getVideoLink();
        if (videoLink != null) {
            stmt.bindString(5, videoLink);
        }
 
        byte[] picture = entity.getPicture();
        if (picture != null) {
            stmt.bindBlob(6, picture);
        }
 
        byte[] sound = entity.getSound();
        if (sound != null) {
            stmt.bindBlob(7, sound);
        }
        stmt.bindLong(8, entity.getCategoryID());
 
        String ascRepresentation = entity.getAscRepresentation();
        if (ascRepresentation != null) {
            stmt.bindString(9, ascRepresentation);
        }
 
        Integer alphaID = entity.getAlphaID();
        if (alphaID != null) {
            stmt.bindLong(10, alphaID);
        }
    }

    @Override
    protected void attachEntity(Symbol entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Symbol readEntity(Cursor cursor, int offset) {
        Symbol entity = new Symbol( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // serverID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // userID
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // isGeneral
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // videoLink
            cursor.isNull(offset + 5) ? null : cursor.getBlob(offset + 5), // picture
            cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6), // sound
            cursor.getLong(offset + 7), // categoryID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ascRepresentation
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // alphaID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Symbol entity, int offset) {
        entity.setServerID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setUserID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setIsGeneral(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVideoLink(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPicture(cursor.isNull(offset + 5) ? null : cursor.getBlob(offset + 5));
        entity.setSound(cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6));
        entity.setCategoryID(cursor.getLong(offset + 7));
        entity.setAscRepresentation(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAlphaID(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Symbol entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Symbol entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "symbols" to-many relationship of Category. */
    public List<Symbol> _queryCategory_Symbols(long categoryID) {
        synchronized (this) {
            if (category_SymbolsQuery == null) {
                QueryBuilder<Symbol> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CategoryID.eq(null));
                category_SymbolsQuery = queryBuilder.build();
            }
        }
        Query<Symbol> query = category_SymbolsQuery.forCurrentThread();
        query.setParameter(0, categoryID);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCategoryDao().getAllColumns());
            builder.append(" FROM SYMBOL T");
            builder.append(" LEFT JOIN CATEGORY T0 ON T.'CATEGORY_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Symbol loadCurrentDeep(Cursor cursor, boolean lock) {
        Symbol entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Category category = loadCurrentOther(daoSession.getCategoryDao(), cursor, offset);
         if(category != null) {
            entity.setCategory(category);
        }

        return entity;    
    }

    public Symbol loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Symbol> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Symbol> list = new ArrayList<Symbol>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Symbol> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Symbol> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
